name: Lint app
on: workflow_dispatch
#  push:
#    branches:
#      - master
#    paths:
#      - "project/**"
jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
#      - name: Checkout code
#        uses: actions/checkout@v3
      - name: Load cached dependencies and run commands
        uses: ./.github/actions/cache-deps
        with:
          run-commands: |
            npm ci
            npm run lint
  build-api-for-test:
    runs-on: ubuntu-latest
    steps:
#      - name: Checkout code
#        uses: actions/checkout@v3
      - name: Load cached dependencies and run commands
        uses: ./.github/actions/cache-deps
        with:
          run-commands: |
            npm ci --omit=dev
            npm run build
            cp -rf .git/ dist/
            touch dist/.nojekyll
      - name: Upload Artifact - Build dist folder
        uses: actions/upload-artifact@v3
        with:
          name: dist
          path: dist
  test-api:
    needs: build-api-for-test
    runs-on: ubuntu-latest
#    environment: testing
    env:
      PORT: 3051
      POSTGRES_USER: jorge
      POSTGRES_DB: auth
      POSTGRES_PASSWORD: 123456
      POSTGRES_HOST: localhost
      POSTGRES_PORT: 5234
      PASSWORD_PEPPER: XeDRMzq9HpuWL2ZYBw2BDi1sxjT5dnOSdOFEU00wvpo=
      JWT_SECRET: Q5nT18OkUuHam/Y5BRbzY3SYlwNqpJRdvYVwS/gzecc=
#      MONGO_INITDB_USERNAME: ${{ secrets.MONGO_INITDB_USERNAME }}
#      MONGO_INITDB_PASSWORD: ${{ secrets.MONGO_INITDB_PASSWORD }}
#      JWT_SECRET: ${{ secrets.JWT_SECRET }}
#      MONGO_CLUSTER: cluster0.hhxxk.mongodb.net
#      PORT: 3191
#      MONGO_INITDB_DATABASE: rest-api-test
#      MONGO_CONNECTION_PROTOCOL: mongodb+srv
    outputs:
      tests-failed: ${{ steps.running-tests.outputs.tests-failed }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Download artifact - Build dist folder
        uses: actions/download-artifact@v3
        with:
          name: dist
          path: dist
      - run: docker compose -f scripts/docker-compose.test.yml pull
      - uses: satackey/action-docker-layer-caching@v0.0.11
        continue-on-error: true
      - name: Load cached dependencies and run commands
        uses: ./.github/actions/cache-deps
        id: running-tests
        with:
          running-test: true
          report-name: report
          run-commands: |
            npm ci --omit=dev
            docker compose -f ./scripts/docker-compose.test.yml up -d
            bash scripts/test
#  report:
#    needs: [test-api, test-api-containerized]
#    if: ${{ failure() && (needs.test-api.outputs.tests-failed == 'true' || needs.test-api-containerized.outputs.tests-failed == 'true') }}
#    runs-on: ubuntu-latest
#    steps:
#      - if: ${{ needs.test-api.outputs.tests-failed == 'true' }}
#        name: Download report
#        uses: actions/download-artifact@v3
#        with:
#          name: report
#          path: project/playwright-report
#      - if: ${{ needs.test-api.outputs.tests-failed == 'true' }}
#        name: Show report
#        run: |
#          ls -la
#          ls -la playwright-report
#          cat playwright-report/test-results.json | jq
#      - if: ${{ needs.test-api-containerized.outputs.tests-failed == 'true' }}
#        name: Download report containerized
#        uses: actions/download-artifact@v3
#        with:
#          name: report-containerized
#          path: project/playwright-report-containerized
#      - if: ${{ needs.test-api-containerized.outputs.tests-failed == 'true' }}
#        name: Show report containerized
#        run: |
#          ls -la
#          ls -la playwright-report-containerized
#          cat playwright-report-containerized/test-results.json | jq
#  deploy:
#    needs: [test-api, test-api-containerized, lint]
#    uses: ./.github/workflows/deploy-serverless.yml
#    secrets: inherit
##      AWS_ROLE_TO_ASSUME: ${{ secrets.AWS_ROLE_TO_ASSUME }} # for granular secret access delete inherit and add the secret
#    with:
#      stage: production
#
#  service-endpoint:
#    needs: deploy
#    runs-on: ubuntu-latest
#    defaults:
#      run:
#        shell: bash
#        working-directory: .
#    steps:
#      - name: Endpoint
#        run: |
#          echo "${{ needs.deploy.outputs.service-endpoint }}"
